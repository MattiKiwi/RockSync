name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    name: Build (${{ matrix.name }})
    runs-on: ${{ matrix.runs_on }}
    container: ${{ matrix.container }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: ubuntu
            runs_on: ubuntu-latest
          - name: windows
            runs_on: windows-latest
          - name: macos
            runs_on: macos-latest
          - name: debian
            runs_on: ubuntu-latest
            container: python:3.12-bookworm
          - name: fedora
            runs_on: ubuntu-latest
            container: fedora:40

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python (hosted runners)
        if: ${{ matrix.name == 'ubuntu' || matrix.name == 'windows' || matrix.name == 'macos' }}
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Python on Fedora container
        if: ${{ matrix.name == 'fedora' }}
        run: |
          set -euxo pipefail
          dnf -y update
          dnf -y install python3 python3-pip git tar xz binutils patchelf
          python3 -m pip install --upgrade pip
          # Ensure `python` alias exists for subsequent steps
          ln -sf "$(command -v python3)" /usr/local/bin/python

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Install build deps
        run: |
          python -m pip install pyinstaller PySide6 pyqtdarktheme mutagen Pillow requests beautifulsoup4 psutil musicbrainzngs lyricsgenius tqdm tidal-dl-ng

      - name: Build with PyInstaller
        run: pyinstaller rocksync.spec

      - name: Package (Linux/macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          set -euxo pipefail
          APPDIR="dist/RockSync"
          test -d "$APPDIR"
          # Use distro label for Debian/Fedora; default to runner OS
          LABEL="${{ matrix.name }}"
          if [ "$LABEL" = "ubuntu" ] || [ "$LABEL" = "macos" ] || [ -z "$LABEL" ]; then
            LABEL="${{ runner.os }}"
          fi
          TAR_NAME="RockSync-${GITHUB_REF_NAME}-${LABEL}.tar.gz"
          tar -C dist -czf "$TAR_NAME" RockSync
          echo "PACKAGE=$TAR_NAME" >> $GITHUB_ENV

      - name: Package (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          if (-not (Test-Path 'dist/RockSync')) { throw 'dist/RockSync not found' }
          $ZipName = "RockSync-$env:GITHUB_REF_NAME-Windows.zip"
          Compress-Archive -Path 'dist/RockSync' -DestinationPath $ZipName -Force
          echo "PACKAGE=$ZipName" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PACKAGE }}
          path: ${{ env.PACKAGE }}
          if-no-files-found: error

  release:
    name: Publish Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List artifacts
        run: find artifacts -type f -maxdepth 2 -print

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/**/*.zip
            artifacts/**/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
